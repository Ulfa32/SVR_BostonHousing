# HYPERPARAMETER TUNING
# Parameter grid for SVR
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [0.001, 0.01, 0.1, 1],
    'epsilon': [0.1, 0.2, 0.5]
}

# Initialize SVR model
svr = SVR(kernel='rbf')

# Grid Search CV
grid_search = GridSearchCV(estimator=svr, param_grid=param_grid, cv=5, scoring='r2', verbose=1, n_jobs=-1)
grid_search.fit(x_train, y_train)

# Best parameters
best_params = grid_search.best_params_
print("Best Parameters:", best_params)

# Train model with best parameters
best_svr = SVR(kernel='rbf', C=best_params['C'], gamma=best_params['gamma'], epsilon=best_params['epsilon'])
best_svr.fit(x_train, y_train)

# Evaluate on test data
y_pred_best = best_svr.predict(x_test)
print("R² (Test):", r2_score(y_test, y_pred_best))

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_best, alpha=0.7, color='blue', label='Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')
plt.title('Actual vs Predicted Values (After Tuning)')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.legend()
plt.show()

# Residual Analysis
residuals = y_test - y_pred_best
plt.figure(figsize=(10, 6))
plt.scatter(y_pred_best, residuals, alpha=0.7, color='purple')
plt.axhline(y=0, color='red', linestyle='--')
plt.title('Residual Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()

# Cross-Validation of Model Performance
cv_scores_best = cross_val_score(best_svr, x_train, y_train, cv=5, scoring='r2')
print(f"Cross-Validation Mean R² (After Tuning): {cv_scores_best.mean():.4f}")

# Evaluation With Additional Metrics
mae = mean_absolute_error(y_test, y_pred_best)
mape = np.mean(np.abs((y_test - y_pred_best) / y_test)) * 100

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Absolute Percentage Error (MAPE): {mape:.2f}%")
