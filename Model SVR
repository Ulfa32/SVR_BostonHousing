# Train the SVR model with RBF kernel
model_svr = SVR(kernel='rbf')
model_svr.fit(x_train, y_train)

# Predicting house prices using the test set
y_pred_svr = model_svr.predict(x_test)
predictions_df = pd.DataFrame({'Actual': y_test[:10].values, 'Predicted': y_pred_svr[:10]})
print(predictions_df)

# Calculating Mean Squared Error (MSE) and R-squared
mse_svr = mean_squared_error(y_test, y_pred_svr)
r2_svr = r2_score(y_test, y_pred_svr)

# Displaying evaluation metrics
print(f'Model Evaluation:')
print(f'Mean Squared Error (SVR): {mse_svr}')
print(f'R-squared (SVR): {r2_svr}')

# Cross-validation R²
cv_scores = cross_val_score(model_svr, x_train, y_train, cv=5, scoring='r2')
cv_mean_r2 = np.mean(cv_scores)

# R² (train)
y_train_pred = model_svr.predict(x_train)
r2_train = r2_score(y_train, y_train_pred)

# R² (test)
y_test_pred = model_svr.predict(x_test)
r2_test = r2_score(y_test, y_test_pred)

# RMSE (Root Mean Squared Error)
rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))

# Displaying evaluation metrics
print("\nMetrics Value:")
print(f"Cross-Validation Mean R²: {cv_mean_r2:.4f}")
print(f"R² (train): {r2_train:.4f}")
print(f"R² (test): {r2_test:.4f}")
print(f"RMSE (test): {rmse_test:.4f}")

# Visualizing actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_test_pred, alpha=0.7, color='blue', label='Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')
plt.title('Actual vs Predicted Values (SVR)')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.legend()
plt.show()

